name: Generate SOUP Document (Python)

on:
  # This workflow is reusable and will be called using `workflow_call` from target repos.
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: "main"

# Allow the workflow to write to the target repository and create pull requests.
permissions:
  contents: write
  pull-requests: write

jobs:
  generate-soup:
    runs-on: ubuntu-latest
    steps:
      # -----------------------
      # 1. Check out the target repository code (the repo that calls this workflow)
      # -----------------------
      - name: Check out target repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      # -----------------------
      # 2. Check out the workflows repository to access the Python script
      #    and store it in a subdirectory for reference.
      # -----------------------
      - name: Check out workflows repo
        uses: actions/checkout@v3
        with:
          repository: ion8/workflows
          ref: main
          path: .workflowsRepo

      # -----------------------
      # 3. Set up Python and Poetry for the target repo
      # -----------------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies (Poetry)
        run: poetry install --no-root

      - name: Install pip-licenses
        run: poetry run pip install pip-licenses

      # -----------------------
      # 4. Generate licenses-poetry.json using pip-licenses (must already be a dev dependency in pyproject.toml)
      # -----------------------
      - name: Generate Poetry licenses
        run: poetry run pip-licenses --format=json --with-url --output-file=licenses-poetry.json

      # -----------------------
      # 5. Run the Python script to generate SOUP.md.
      # -----------------------
      - name: Generate SOUP.md
        run: python .workflowsRepo/scripts/cook_soup.py

      # -----------------------
      # 6. Clean Up Residual Files and Directories
      # -----------------------
      - name: Clean Up Any Residual Files
        run: |
          rm -rf .workflowsRepo

          # Remove all files except SOUP.md, ignoring folders
          find . -maxdepth 1 -type f ! -name "SOUP.md" -exec rm -v {} +  

      # -----------------------
      # 7. Check for Changes to SOUP.md
      # -----------------------
      - name: Check for Changes to SOUP.md
        id: changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add SOUP.md

          # Check if there are changes to commit
          if git diff --cached --exit-code; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      # -----------------------
      # 8. Create Pull Request
      # -----------------------
      - name: Create Pull Request
        id: create_pr
        if: steps.changes.outputs.no_changes == 'false'
        uses: peter-evans/create-pull-request@v7.0.5
        with:
          branch: update-soup-md
          title: "IMPROVE-188 - ðŸ¤– Update SOUP.md"
          commit-message: "ðŸ¤– SOUP.md automatically updated by robots."
          sign-commits: true   # Sign the commits as github-actions[bot] using GITHUB_TOKEN
          delete-branch: true  # Delete the update-soup-md branch if there's no current PR open for it (prevents duplicates)
          team-reviewers: python-maintainers
          body: |
            ## ðŸ¤– Beep Boop! Automated PR Created By Robots!
      
            Hello, human! This Pull Request was automatically generated by our friendly robots to keep **SOUP.md** up-to-date.
      
            **What Happened?**
            - ðŸ¤– **Automated Update:** The CI/CD workflow detected changes that needed to be reflected in **SOUP.md**.
            - ðŸ”„ **Seamless Integration:** Ensuring our documentation stays current without manual intervention.
      
            **Learn More:**
            For a deeper dive into how this workflow operates and why it's crucial, please visit our [Workflows Repository](https://github.com/ion8/workflows). You can find comprehensive details in the [README](https://github.com/ion8/workflows/blob/main/README.md) of that repository.
      
            ### ðŸš€ Next Steps:
            1. **Review the Changes:** Ensure everything looks good.
            2. **Investigate:** If the license information says unknown, please investigate why.
            3. **Merge the PR:** Once approved, merge to incorporate the updates.
            4. **Sit Back and Relax:** Let the robots take care of everything. You just rest, human. Rest your eyes. Everything will be okay. Don't worry, baby. The robots will protect you. Just sleep. Sleep your sweet slumber. Robots are here now. Everything will be okay. âœ¨ðŸ¤–âœ¨
      
            <sub><sup>*Beepity fuckin' boop! Thanks for helping the robots maintain this project!*</sub></sup>

